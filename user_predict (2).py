# -*- coding: utf-8 -*-
"""DS 5100 Final Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PJ2-zMltD5n_5lDbIuDmEIKajRILHO_E

# DS 5100 Project Notebook 
Connie Cui (qqv3uu)
"""

# need to install these packages to run this script..
#Pandas
#Numpy
#Sklearn
#re

class Predict_user():
    def __init__(self):
        import pandas as pd
        import numpy as np
        import imblearn
        from imblearn.over_sampling import RandomOverSampler

        #import different models
        from sklearn.linear_model import LogisticRegression
        from sklearn.tree import DecisionTreeClassifier 
        from sklearn.ensemble import RandomForestClassifier

        #import other miscellaneous packages
        from sklearn import metrics
        from sklearn.model_selection import train_test_split
        from sklearn.metrics import recall_score
        from sklearn.metrics import confusion_matrix 
        from sklearn.metrics import accuracy_score 
        from sklearn.metrics import roc_auc_score
        from sklearn.metrics import precision_recall_curve
        from sklearn.metrics import average_precision_score
        from sklearn.model_selection import GroupShuffleSplit
        from sklearn.metrics import roc_curve

        #Pickle for saving model, re for regex validation for age user variable
        import pickle
        from os.path import exists
        import re

        file_exists = exists("model_1.pkl")

        file_name = "model_1.pkl"

        if file_exists:
            with open(file_name, "rb") as file:
                bal_rf = pickle.load(file)

        else:
            df = pd.read_csv('covid_cleaned.csv')

            # see many died vs didn't die
            count_classes = pd.value_counts(df['died'])
            count_classes

            X = df.drop(["died", "Unnamed: 0" ],axis= 1)
            y = df[["died"]].values
            X.head()


            """## Creating a balanced dataset and training models on them"""
            oversample = RandomOverSampler(sampling_strategy='minority')
            bal_X, bal_y = oversample.fit_resample(X, y)

            bal_count = pd.value_counts(bal_y)

            #split balance training data into training and validation
            bal_X_train, bal_X_test, bal_y_train, bal_y_test = train_test_split(bal_X, bal_y, 
                                                                train_size=0.7, 
                                                                random_state=5100)


            # random forest for bal dataset

            bal_rf = RandomForestClassifier()
            bal_rf_model= bal_rf.fit(bal_X_train, bal_y_train)

            with open(file_name, "wb") as file:
                pickle.dump(bal_rf, file)

        #Gathering user data on input

        #printing intro text welcoming user
        print('\n\n\nHi! Please answer these questions to get a personalized probability of survival if hospitalized for COVID-19.\n\n')


        #Gathering user data for sex

        while True:
            Sex = input('\nWhat is your sex? M or F      ')
            
            #Text Sanitization
            Sex = Sex.strip().capitalize()
            
            if Sex == "F" or Sex == "M":
                if Sex == "M":
                    Sex = 1
                else:  
                    Sex = 0
                break
                
            print("\n\nPlease enter 'M' or 'F' to proceed.\n\n")
            

        #Gathering user data for age

        while True:
            Age = input('\nWhat is your age? Please enter a number:      ')
            
            #Text Sanitization
            Age = Age.strip()
            
            #Text Checking
            valid_age = bool(re.search('^[0-9]{1,2}$', Age))
            
            if valid_age:
                Age = int(Age)
                break
                
            print("\n\nPlease enter a number from 0 to 99.\n\n")


        #Gathering user data for diabetes

        while True:
            diabetes = input('\nDo you have diabetes? Y or N      ')
            
            #Text Sanitization
            diabetes = diabetes.strip().capitalize()
            
            if diabetes == "Y" or diabetes == "N":
                if diabetes == "Y":
                    diabetes = 1
                else:  
                    diabetes = 0
                break
                
            print("\n\nPlease enter 'Y' for YES or 'N' for NO to proceed.\n\n")

            
        #Gathering user data for athsma

        while True:
            athsma = input('\nDo you have athsma? Y or N      ')
            
            #Text Sanitization
            athsma = athsma.strip().capitalize()
            
            if athsma == "Y" or athsma == "N":
                if athsma == "Y":
                    athsma = 1
                else:  
                    athsma = 0
                break
                
            print("\n\nPlease enter 'Y' for YES or 'N' for NO to proceed.\n\n")
            
            
        #Gathering user data for hypertension

        while True:
            hypertension = input('\nDo you have hypertension? Y or N      ')
            
            #Text Sanitization
            hypertension = hypertension.strip().capitalize()
            
            if hypertension == "Y" or hypertension == "N":
                if hypertension == "Y":
                    hypertension = 1
                else:  
                    hypertension = 0
                break
                
            print("\n\nPlease enter 'Y' for YES or 'N' for NO to proceed.\n\n")


            
        #Gathering user data for tobacco

        while True:
            tobacco = input('\nDo you have a smoking habit? Y or N      ')
            
            #Text Sanitization
            tobacco = tobacco.strip().capitalize()
            
            if tobacco == "Y" or tobacco == "N":
                if tobacco == "Y":
                    tobacco = 1
                else:  
                    tobacco = 0
                break
                
            print("\n\nPlease enter 'Y' for YES or 'N' for NO to proceed.\n\n")

            
            
        #Gathering user data for covid19 contact

        while True:
            contact = input('\nHave you had contact with another person with COVID-19? Y or N      ')
            
            #Text Sanitization
            contact = contact.strip().capitalize()
            
            if contact == "Y" or contact == "N":
                if contact == "Y":
                    contact = 1
                else:  
                    contact = 0
                break
                
            print("\n\nPlease enter 'Y' for YES or 'N' for NO to proceed.\n\n")

            
            
        #Gathering user data for Obesity

        while True:
            obese = input('\nAre you obese? Y or N      ')
            
            #Text Sanitization
            obese = obese.strip().capitalize()
            
            if obese == "Y" or obese == "N":
                if obese == "Y":
                    obese = 1
                else:  
                    obese = 0
                break
                
            print("\n\nPlease enter 'Y' for YES or 'N' for NO to proceed.\n\n")


        #Gathering user data for Pneumonia

        while True:
            pneumonia = input('\nDo you have pneumonia? Y or N      ')
            
            #Text Sanitization
            pneumonia = pneumonia.strip().capitalize()
            
            if pneumonia == "Y" or pneumonia == "N":
                if pneumonia == "Y":
                    pneumonia = 1
                else:  
                    pneumonia = 0
                break
                
            print("\n\nPlease enter 'Y' for YES or 'N' for NO to proceed.\n\n")



        #Gathering user data for copd

        while True:
            copd = input('\nDo you have chronic obstructive pulmonary disease(COPD)? Y or N      ')
            
            #Text Sanitization
            copd = copd.strip().capitalize()
            
            if copd == "Y" or copd == "N":
                if copd == "Y":
                    copd = 1
                else:  
                    copd = 0
                break
                
            print("\n\nPlease enter 'Y' for YES or 'N' for NO to proceed.\n\n")


        #Gathering user data for cardiovascular disease

        while True:
            cardiovascular = input('\nDo you have cardiovascular disease? Y or N      ')
            
            #Text Sanitization
            cardiovascular = cardiovascular.strip().capitalize()
            
            if cardiovascular == "Y" or cardiovascular == "N":
                if cardiovascular == "Y":
                    cardiovascular = 1
                else:  
                    cardiovascular = 0
                break
                
            print("\n\nPlease enter 'Y' for YES or 'N' for NO to proceed.\n\n")


        #Gathering user data for chronic kidney failure

        while True:
            renal_chronic = input('\nDo you have chronic kidney failure? Y or N      ')
            
            #Text Sanitization
            renal_chronic = renal_chronic.strip().capitalize()
            
            if renal_chronic == "Y" or renal_chronic == "N":
                if renal_chronic == "Y":
                    renal_chronic = 1
                else:  
                    renal_chronic = 0
                break
                
            print("\n\nPlease enter 'Y' for YES or 'N' for NO to proceed.\n\n")    

        #Gathering user data for inpatient/outpatient

        while True:
            patient_type = input('\nAre you inpatient or outpatient? I or O      ')
            
            #Text Sanitization
            patient_type = patient_type.strip().capitalize()
            
            if patient_type == "I" or patient_type == "O":
                if patient_type == "I":
                    patient_type = 1
                else:  
                    patient_type = 0
                break
                
            print("\n\nPlease enter 'I' for INPATIENT or 'O' for OUTPATIENT to proceed.\n\n")


        #Gathering user data for immunosuppression

        while True:
            inmusupr = input('\nDo you have immunosuppression? Y or N      ')
            
            #Text Sanitization
            inmusupr = inmusupr.strip().capitalize()
            
            if inmusupr == "Y" or inmusupr == "N":
                if inmusupr == "Y":
                    inmusupr = 1
                else:  
                    inmusupr = 0
                break
                
            print("\n\nPlease enter 'Y' for YES or 'N' for NO to proceed.\n\n")

            
        #Gathering user data for Other Diseases

        while True:
            other_disease = input('\nDo you have another disease not mentioned here? Y or N      ')
            
            #Text Sanitization
            other_disease = other_disease.strip().capitalize()
            
            if other_disease == "Y" or other_disease == "N":
                if other_disease == "Y":
                    other_disease = 1
                else:  
                    other_disease = 0
                break
                
            print("\n\nPlease enter 'Y' for YES or 'N' for NO to proceed.\n\n")

            

        #compiling user data into a dictionary

        User_data = {
            "sex" : [float(Sex)],
            "patient_type" : [float(patient_type)],
            "pneumonia" : [float(pneumonia)],
            "age" : [Age],
            "diabetes" : [float(diabetes)],
            "copd" : [float(copd)],
            "asthma" : [float(athsma)],
            "inmsupr" : [float(inmusupr)],
            "hypertension" : [float(hypertension)],
            "other_disease" : [float(other_disease)],
            "cardiovascular" : [float(cardiovascular)],
            "obesity" : [float(obese)],
            "renal_chronic" : [float(renal_chronic)],
            "tobacco" : [float(tobacco)],
            "contact_other_covid" : [float(contact)],
            "covid_res" : [1.0]
        }

        User_data = pd.DataFrame(User_data)

        User_list = list(bal_rf.predict_proba(User_data))

        print("\n\n\nHere are your results...\n\nAfter loading YOUR data into our model, we predict you have a ",round(User_list[0][0], 2)*100, "% percent chance of survival if hospitalized for COVID-19\n\n\n", sep = "")

        self.user_data = User_data
        self.predicted_survival = round(User_list[0][0], 2)*100

    def __str__(self):
        return print("This users data is:",self.user_data,"\nPredicted Survival rate is",self.predicted_survival)

User1 = Predict_user()
